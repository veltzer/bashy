- do debug to bashy.

- all bashy functions should start with _bashy_
	the first underscore is so that their names will not clutter the command line
	the "bashy" is to distiniguish them from other bash tools/frameworks.
- add feature to allow to set the name of the current window in tmux to the name of the git
	repo that you are in.
	This will save me the trouble of having to do that myself all the time.
- improve bashy:
	move to assoc data strcutures.
	allow to deactivate plugins.
	do plugin for poetry
- have a "strict" mode for bashy where it does not accept failures.
- have a command to bashy to print a list of correctly running plugins (and nothing else)
	so that I could compare the list between my desktop and my laptop.
- use associate array for bashys internal structures.
	this will allow us to do more for other TODO items.
- read all plugins at startup and not just those marked in bashy.list
- do an install hook where each module could hook up an install function and you
	could install every prereq using:
	$ bashy install [name]
- bashy should source all plugins and so we would need to list just the ones
	we want to activate in the bashy.list file.
	This way we could also activate plugins that we did not want activate
	right when we login.
- allow plugins to turn themsevles on and off.
	$ bashy activate [pluginname]
	$ bashy deactivate [pluginname]
	write deactivate methods for all my default plugins and make it easy to write
	them.
- allow to see the status of plugins which are activateed
- do everything with one command: "bashy":
	$ bashy errors
	$ bashy debug
	$ bashy status_core
	$ bashy status_plugins
	$ bashy activate [pluginname]
	$ bashy deactivate [pluginname]
- add bash completion for bashy and install it in:
	/home/mark/.bash_completion.d/bashy
- pimp up my powerline-shell
	add powerline line feel to tmux.
- create more check functions in core/check.bash and use them all over my plugins.
- create distributions on github as a result of bashy workflow with proper versioning
	and change the instructions about using bashy to get bashy from last version.
- make sure that we have no "evals" left in the code.
- allow plugins to depend on other plugins and deduce right order and plugins
	to activate automatically.
- consider using libraries from https://github.com/juan131/bash-libraries
- consider using https://gitlab.com/bertrand-benoit/scripts-common
- clean our path (remove duplicate entries) in bashy.
- put all the extra paths we have at the end of the path and not in the beginging.
	(actauly have a config for that).
- make a script that installs bashy locally without the .git
	folder.
- make a script run_tests.bash
	that runs all tests and makes sure that everything is fine.
- bashy should not pollute the users bash namespace with too many functions.
	this is a work in progress, look at core/misc.sh.
- make bashy be reloadable (currently it is not as the array just keep growing).
- make every bashy plugin have turn on and turn off so that we could turn them
	on and off.
	do commands for that.
- make bashy have uninstall for each plugin and install.
- if a plugin needs a configuration option let him declare that and documentation for it.
	Let it read it from the ~/.bashy.config file (the file already exists)
- separate myenv from bashy.
- stop calling all the functions bashy_* and configure_* install_* these pollute the users
	namespace. Put _bashy in front of any function that is internal to bashy.
	bashy_+[TAB] should only show functions that users may want to run.
